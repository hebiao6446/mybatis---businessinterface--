package com.business.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.support.DefaultTransactionDefinition;

import com.business.entity.BlessingsType;
import com.business.entity.Company;
import com.business.entity.Contacts;
import com.business.entity.Product;
import com.business.entity.ProductCategory;
import com.business.entity.Sell;
import com.business.entity.SellProduct;
import com.business.entity.SellVisit;
import com.business.entity.User;
import com.business.service.BlessingsManager;
import com.business.service.ColumnManager;
import com.business.service.ContactManager;
import com.business.service.ProductManager;
import com.business.service.UserManager;
import com.common.Commonparam;

@Service
@Transactional
public class ProductManagerImpl implements ProductManager {
	@Autowired
	private SqlSessionTemplate sqlSession;

	/**
	 * 此句话针对查询
	 */
	@Transactional(propagation = Propagation.NOT_SUPPORTED, readOnly = true)
	@Override
	public List findProductCategoryList(JSONObject param) {

		param.put("parentId", 0);

		List<ProductCategory> list = (List<ProductCategory>) sqlSession
				.selectList("ProductCategory.findProductCategoryList", param);
		for (ProductCategory pc : list) {
			param.put("parentId", pc.getProductCategoryId());
			List<ProductCategory> list1 = (List<ProductCategory>) sqlSession
					.selectList("ProductCategory.findProductCategoryList",
							param);
			pc.setProductlist(list1);
		}

		return list;
	}

	@Override
	public List findProductList(JSONObject param) {
		List<Product> list = (List<Product>) sqlSession.selectList("Product.findProductList", param);
		return list;
	}
	@Transactional(propagation = Propagation.NOT_SUPPORTED, readOnly = true)
	// 一个只读事务，可以提高效率。
	@Override
	public Object findProductImgList(Product product) {
		Object obj = sqlSession.selectList("ProductImg.findProductImgList", product);
		return obj;
	}

	@Override
	public void insertOrder(JSONObject param) {
	
		sqlSession.update("Product.insertOrder", param);
	
	}

	@Override
	public void insertSellVisit(JSONObject param) {
		sqlSession.update("SellVisit.insertSellVisit", param);
		
	}

	@Override
	public List findSellList(JSONObject param) {
		List<Sell> list = (List<Sell>) sqlSession.selectList("Sell.findSellList", param);
		return list;
	}
	
	@Transactional(propagation = Propagation.NOT_SUPPORTED, readOnly = true)
	// 一个只读事务，可以提高效率。
	@Override
	public Object findSellVisitList(Sell sell) {
		Object obj = sqlSession.selectList("SellVisit.findSellVisitList", sell);
		return obj;
	}

	@Override
	public List<SellProduct> findsellProductList(Sell sell) {
		List<SellProduct> list =  (List<SellProduct>) sqlSession.selectList("SellProduct.findsellProductList", sell);
		return list;
	}

	@Override
	public Contacts findSellContactsList(Sell sell) {
		Contacts obj = (Contacts) sqlSession.selectOne("Contacts.findSellContactsList", sell);
		return obj;
	}

	@Override
	public 	Product findSellProductList(SellProduct product) {
		Product list =  (Product)  sqlSession.selectOne("Product.findSellProductList", product);
		return list;
	}


}
