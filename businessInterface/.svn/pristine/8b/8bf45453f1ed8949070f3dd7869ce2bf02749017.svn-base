package com.business.service.impl;

import java.math.BigDecimal;
import java.sql.Time;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import net.sf.json.JSONObject;

import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.business.entity.Attendance;
import com.business.entity.Company;
import com.business.entity.User;
import com.business.service.SignManager;

@Service
@Transactional
public class SignManagerImpl implements SignManager {
	@Autowired
	private SqlSessionTemplate sqlSession;

	@Override
	public Attendance findTodaySign(JSONObject map) {
		return (Attendance) sqlSession.selectOne("Attendance.findTodaySign",
				map);
	}

	@Override
	public Company findCompanyInfo(User user) {
		return (Company) sqlSession.selectOne("Company.findWorkTime", user);
	}

	@Override
	public void updateSign(JSONObject param) {
		sqlSession.insert("Attendance.updateSign", param);
	}

	@Override
	public void insertSign(JSONObject param) {
		sqlSession.update("Attendance.insertSign", param);
	}

	@Override
	public void insertContent(JSONObject param) {
		// sqlSession.insert("Content.insertContent", param);
	}

	@Transactional(propagation = Propagation.NOT_SUPPORTED, readOnly = true)
	@Override
	public List<Attendance> findHistorySign(JSONObject param) {
		Integer size = param.getInt("size");
		Integer page = param.getInt("page");
		List<Attendance> list = new ArrayList<>();
		for (int i = 0; i < size; i++) {
			java.sql.Date date = null;
			if (param.getString("fontTime") != null
					&& !"".equals(param.getString("fontTime"))) {
				date = new java.sql.Date(java.sql.Date.valueOf(
						param.getString("fontTime")).getTime()
						- (page - 1) * i * 24 * 60 * 60 * 1000);
			} else {
				date = new java.sql.Date(new Date().getTime() - (page - 1) * i
						* 24 * 60 * 60 * 1000);
			}
			if (param.getString("backTime") != null
					&& !"".equals(param.getString("backTime"))) {
				if (java.sql.Date.valueOf(param.getString("backTime")).before(
						date)) {
					break;
				}
			}
			param.put("dayTime", date);
			Attendance a = (Attendance) sqlSession.selectOne(
					"Attendance.findTodaySign", param);
			list.add(a);
		}
		return list;
	}

	@Transactional(propagation = Propagation.NOT_SUPPORTED, readOnly = true)
	@Override
	public List<Attendance> findManagedSign(JSONObject param) {
		
		

		return null;
	}

}
