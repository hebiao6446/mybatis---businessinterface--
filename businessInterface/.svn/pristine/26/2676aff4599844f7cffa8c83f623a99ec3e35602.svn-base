package com.business.action;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Random;
import java.util.UUID;

import javax.annotation.Resource;
import javax.imageio.ImageIO;
import javax.persistence.Column;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.DocAttributeSet;
import javax.print.attribute.HashDocAttributeSet;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.Copies;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.swing.JFileChooser;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.StrutsStatics;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.springframework.stereotype.Controller;

import com.json.BaseBean;
import com.business.entity.Attendance;
import com.business.entity.Group;
import com.business.entity.User;
import com.business.service.ContactManager;
import com.business.service.UserManager;
import com.common.Commonparam;
import com.common.MD5Util;
import com.common.PingYin;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.sun.image.codec.jpeg.JPEGCodec;
import com.sun.image.codec.jpeg.JPEGImageEncoder;

@Namespace("/contact")
public class ContactAction extends ActionSupport {

	private static Logger logger = Logger.getLogger(ContactAction.class);
	@Resource
	private ContactManager contactManager;
	@Resource
	private UserManager userManager;
	private String key, data;

	/**
	 * 联系人分组查询 联系人列表
	 * 
	 * @throws Exception
	 */
	@Action(value = "findUserGroupList")
	public void findUserGroupList() throws Exception {
		HttpServletResponse response = (HttpServletResponse) ActionContext
				.getContext().get(ServletActionContext.HTTP_RESPONSE);
		HttpServletRequest request = (HttpServletRequest) ActionContext
				.getContext().get(ServletActionContext.HTTP_REQUEST);
		BaseBean bean = new BaseBean();
		try {
			String keyparam = Commonparam.Md5String(data);

			JSONObject param = JSONObject.fromObject(data);
			if (keyparam.equals(key)) {
				List<Group> list = contactManager.findUserGroupList(param);

				for (Group group : list) {

					Integer count = contactManager.findcontactsCount(group);
					Object contactlist = contactManager.findcontactsList(group);
					group.setContactsCount(count);
					group.setContactsList(contactlist);
				}

				bean.setStatus(200);
				bean.setRows(list);

			} else {

				bean.setStatus(400);
				bean.setMsg(Commonparam.error_param_msg);
			}
		} catch (Exception e) {
			bean.setMsg(e.getLocalizedMessage());
			logger.info("contact/findUserGroupList:param=" + data + ",error="
					+ e.getLocalizedMessage());
		}

		String json = JSONObject.fromObject(bean,
				Commonparam.getJsonConfig("yyyy-MM-dd HH:mm:ss")).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));
	}

	/**
	 * 联系人分组查询 联系人列表
	 * 
	 * @throws Exception
	 */
	@Action(value = "findGroupList")
	public void findGroupList() throws Exception {
		HttpServletResponse response = (HttpServletResponse) ActionContext
				.getContext().get(ServletActionContext.HTTP_RESPONSE);
		HttpServletRequest request = (HttpServletRequest) ActionContext
				.getContext().get(ServletActionContext.HTTP_REQUEST);
		BaseBean bean = new BaseBean();
		try {
			String keyparam = Commonparam.Md5String(data);

			JSONObject param = JSONObject.fromObject(data);
			if (keyparam.equals(key)) {
				List<Group> list = contactManager.findGroupList(param);

				bean.setStatus(200);
				bean.setRows(list);
			
			}else{

				bean.setStatus(400);
				bean.setMsg(Commonparam.error_param_msg);
			}
		} catch (Exception e) {
			bean.setMsg(e.getLocalizedMessage());
			logger.info("contact/findGroupList:param=" + data + ",error="
					+ e.getLocalizedMessage());
		}
		String json = JSONObject.fromObject(bean).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));
	}
	
	
	
	/**
	 * 联系人  人数  数量  
	 * userId	 * 
	 * @throws Exception
	 */
	@Action(value = "findMyContactsNum")
	public void findMyContactsNum() throws Exception {
		HttpServletResponse response = (HttpServletResponse) ActionContext
				.getContext().get(ServletActionContext.HTTP_RESPONSE);
		HttpServletRequest request = (HttpServletRequest) ActionContext
				.getContext().get(ServletActionContext.HTTP_REQUEST);
		BaseBean bean = new BaseBean();
		try {
			String keyparam = Commonparam.Md5String(data);

			JSONObject param = JSONObject.fromObject(data);
			if (keyparam.equals(key)) {
				Object myContactsNum = contactManager.findMyContactsNum(param);
				Object subContactsNum  = contactManager.findSubContactsNum(param);
				
				HashMap result = new HashMap();
				
				result.put("myContactsNum", myContactsNum);
				result.put("subContactsNum", subContactsNum);
				
				bean.setStatus(200);
				bean.setRows(result);
			
			}else{

				bean.setStatus(400);
				bean.setMsg(Commonparam.error_param_msg);
			}
		} catch (Exception e) {
			bean.setMsg(e.getLocalizedMessage());
			logger.info("contact/findMyContactsNum:param=" + data + ",error="
					+ e.getLocalizedMessage());
		}
		String json = JSONObject.fromObject(bean).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));
	}

	/**
	 * 联系人分组 编辑 添加，修改
	 * 
	 * @throws Exception
	 */
	@Action(value = "updateUserGroupInfo")
	public void updateUserGroupInfo() throws Exception {
		HttpServletResponse response = (HttpServletResponse) ActionContext
				.getContext().get(ServletActionContext.HTTP_RESPONSE);
		HttpServletRequest request = (HttpServletRequest) ActionContext
				.getContext().get(ServletActionContext.HTTP_REQUEST);

		BaseBean bean = new BaseBean();

		try {

			String keyparam = Commonparam.Md5String(data);
			JSONObject param = JSONObject.fromObject(data);
			if (keyparam.equals(key)) {
				User user = userManager.userLogin(param);
				Long userId = param.getLong("userId");

				if (user != null && user.getUserId() == userId)

				{
					param.put("updateTime", Commonparam.Date2Str());

					contactManager.updateUserGroupInfo(param);

					bean.setStatus(200);

				}
			} else {
				bean.setStatus(400);
				bean.setMsg(Commonparam.error_param_msg);
			}

		} catch (Exception e) {
			bean.setMsg(e.getLocalizedMessage());
			logger.info("contact/updateUserGroupInfo:param=" + data + ",error="
					+ e.getLocalizedMessage());
		}

		String json = JSONObject.fromObject(bean).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));
	}

	/**
	 * 联系人————————编辑 添加，修改
	 * 
	 * @throws Exception
	 */
	@Action(value = "updateContactsInfo")
	public void updateContactsInfo() throws Exception {
		HttpServletResponse response = (HttpServletResponse) ActionContext
				.getContext().get(ServletActionContext.HTTP_RESPONSE);
		HttpServletRequest request = (HttpServletRequest) ActionContext
				.getContext().get(ServletActionContext.HTTP_REQUEST);

		BaseBean bean = new BaseBean();

		try {

			String keyparam = Commonparam.Md5String(data);
			JSONObject param = JSONObject.fromObject(data);
			if (keyparam.equals(key)) {
				User user = userManager.userLogin(param);
				Long userId = param.getLong("userId");

				if (user != null && user.getUserId() == userId)

				{
					param.put("updateTime", Commonparam.Date2Str());

					contactManager.updateContactsInfo(param);

					bean.setStatus(200);

				}
			} else {
				bean.setStatus(400);
				bean.setMsg(Commonparam.error_param_msg);
			}

		} catch (Exception e) {
			bean.setMsg(e.getLocalizedMessage());
			logger.info("contact/updateContactsInfo:param=" + data + ",error="
					+ e.getLocalizedMessage());
		}

		String json = JSONObject.fromObject(bean).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));
	}

	/**
	 * 删除分组
	 * 
	 * @throws Exception
	 */
	@Action(value = "deleteGroupData")
	public void deleteGroupData() throws Exception {
		HttpServletResponse response = (HttpServletResponse) ActionContext
				.getContext().get(ServletActionContext.HTTP_RESPONSE);
		HttpServletRequest request = (HttpServletRequest) ActionContext
				.getContext().get(ServletActionContext.HTTP_REQUEST);
		BaseBean bean = new BaseBean();
		try {
			String keyparam = Commonparam.Md5String(data);

			JSONObject param = JSONObject.fromObject(data);

			if (keyparam.equals(key)) {

				Group group = contactManager.findGroupisDefaultList(param);
				if(param.getLong("groupId")!=0&&param.getLong("groupId")!=group.getGroupId()){
					param.put("defaultGroupId", group.getGroupId());
					User user = userManager.userLogin(param);
					Long userId = param.getLong("userId");

					if (user != null && user.getUserId() == userId) {
						param.put("updateTime", Commonparam.Date2Str());

						contactManager.deleteGroupData(param);

						bean.setStatus(200);
					}
					
				}
				

				
			} else {
				bean.setStatus(400);
				bean.setMsg(Commonparam.error_param_msg);
			}

		} catch (Exception e) {
			bean.setMsg(e.getLocalizedMessage());
			logger.info("contact/deleteGroupData:param=" + data + ",error="
					+ e.getLocalizedMessage());
		}

		String json = JSONObject.fromObject(bean).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));
	}

	public String getKey() {
		return key;
	}

	public void setKey(String key) {
		this.key = key;
	}

	public String getData() {
		return data;
	}

	public void setData(String data) {
		this.data = data;
	}

	public void setUserManager(UserManager userManager) {
		this.userManager = userManager;
	}

	public UserManager getUserManager() {
		return userManager;
	}

}
