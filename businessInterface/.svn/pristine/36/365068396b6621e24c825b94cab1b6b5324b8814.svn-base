package com.business.action;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Random;
import java.util.UUID;

import javax.annotation.Resource;
import javax.imageio.ImageIO;
import javax.persistence.Column;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.DocAttributeSet;
import javax.print.attribute.HashDocAttributeSet;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.Copies;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.swing.JFileChooser;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.StrutsStatics;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.stereotype.Controller;

import com.business.entity.Blessings;
import com.business.entity.BlessingsType;
import com.business.entity.Company;
import com.business.entity.Contacts;
import com.business.entity.Group;
import com.business.entity.Product;
import com.business.entity.ProductCategory;
import com.business.entity.Sell;
import com.business.entity.SellProduct;
import com.business.entity.SellVisit;
import com.business.entity.User;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.common.BitMatrix;
import com.json.BaseBean;
import com.business.service.BlessingsManager;
import com.business.service.ColumnManager;
import com.business.service.ContactManager;
import com.business.service.ProductManager;
import com.business.service.UserManager;
import com.common.Commonparam;
import com.common.MD5Util;
import com.common.PingYin;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.sun.image.codec.jpeg.JPEGCodec;
import com.sun.image.codec.jpeg.JPEGImageEncoder;

@Namespace("/product")
public class ProductAction extends ActionSupport {

	/**
	 * 
	 */
	private static final long serialVersionUID = 8491620621758148693L;
	private static Logger logger = Logger.getLogger(ProductAction.class);
	@Resource
	private ProductManager productManager;
	@Resource
	private UserManager userManager;
	private String key, data;

	/**
	 * 产品分类列表
	 * 
	 * @throws Exception
	 */
	@Action(value = "findProductCategoryList")
	public void findProductCategoryList() throws Exception {
		HttpServletResponse response = (HttpServletResponse) ActionContext
				.getContext().get(ServletActionContext.HTTP_RESPONSE);
		HttpServletRequest request = (HttpServletRequest) ActionContext
				.getContext().get(ServletActionContext.HTTP_REQUEST);
		BaseBean bean = new BaseBean();
		try {
			String keyparam = Commonparam.Md5String(data);

			JSONObject param = JSONObject.fromObject(data);
			if (keyparam.equals(key)) {
				List<ProductCategory> list = productManager
						.findProductCategoryList(param);
				bean.setStatus(200);
				bean.setRows(list);

			} else {

				bean.setStatus(400);
				bean.setMsg(Commonparam.error_param_msg);
			}
		} catch (Exception e) {
			bean.setMsg(e.getLocalizedMessage());
			logger.info("product/findProductCategoryList:param=" + data
					+ ",error=" + e.getLocalizedMessage());
		}

		String json = JSONObject.fromObject(bean,
				Commonparam.getJsonConfig("yyyy-MM-dd HH:mm:ss")).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));
	}

	/**
	 * 产品详情接口
	 * 
	 * @throws Exception
	 */
	@Action(value = "findProductList")
	public void findProductList() throws Exception {
		HttpServletResponse response = (HttpServletResponse) ActionContext
				.getContext().get(ServletActionContext.HTTP_RESPONSE);
		HttpServletRequest request = (HttpServletRequest) ActionContext
				.getContext().get(ServletActionContext.HTTP_REQUEST);
		BaseBean bean = new BaseBean();
		try {
			String keyparam = Commonparam.Md5String(data);

			JSONObject param = JSONObject.fromObject(data);
			if (keyparam.equals(key)) {
				List<Product> list = productManager.findProductList(param);

				for (Product product : list) {

					Object productImglist = productManager
							.findProductImgList(product);

					product.setProductImglist(productImglist);
				}

				bean.setStatus(200);
				bean.setRows(list);

			} else {

				bean.setStatus(400);
				bean.setMsg(Commonparam.error_param_msg);
			}
		} catch (Exception e) {
			bean.setMsg(e.getLocalizedMessage());
			logger.info("product/findProductList:param=" + data + ",error="
					+ e.getLocalizedMessage());
		}

		String json = JSONObject.fromObject(bean,
				Commonparam.getJsonConfig("yyyy-MM-dd HH:mm:ss")).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));
	}

	/**
	 * 下订单
	 * 
	 * @throws Exception
	 */
	@Action(value = "insertOrder")
	public void insertOrder() throws Exception {
		HttpServletResponse response = (HttpServletResponse) ActionContext
				.getContext().get(ServletActionContext.HTTP_RESPONSE);
		HttpServletRequest request = (HttpServletRequest) ActionContext
				.getContext().get(ServletActionContext.HTTP_REQUEST);

		BaseBean bean = new BaseBean();

		try {

			String keyparam = Commonparam.Md5String(data);
			JSONObject param = JSONObject.fromObject(data);

			if (keyparam.equals(key)) {
				User user = userManager.userLogin(param);
				Long userId = param.getLong("userId");

				if (user != null && user.getUserId() == userId) {
					Integer qty = param.getInt("orderCount");
					double price = param.getDouble("price");
					BigDecimal b = BigDecimal.valueOf(price).multiply(
							BigDecimal.valueOf(qty));
					param.put("totalPrice", b);
					param.put("createTime", Commonparam.Date2Str());

					productManager.insertOrder(param);

					bean.setStatus(200);

				}
			} else {
				bean.setStatus(400);
				bean.setMsg(Commonparam.error_param_msg);
			}

		} catch (Exception e) {
			bean.setMsg(e.getLocalizedMessage());
			logger.info("product/insertOrder:param=" + data + ",error="
					+ e.getLocalizedMessage());
		}

		String json = JSONObject.fromObject(bean).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));
	}

	/**
	 * 销售记录查询列表——————接口
	 * 
	 * @throws Exception
	 */
	@Action(value = "findSellList")
	public void findSellList() throws Exception {
		HttpServletResponse response = (HttpServletResponse) ActionContext
				.getContext().get(ServletActionContext.HTTP_RESPONSE);
		HttpServletRequest request = (HttpServletRequest) ActionContext
				.getContext().get(ServletActionContext.HTTP_REQUEST);
		BaseBean bean = new BaseBean();
		try {
			String keyparam = Commonparam.Md5String(data);

			JSONObject param = JSONObject.fromObject(data);
			if (keyparam.equals(key)) {
				List<Sell> list = productManager.findSellList(param);

				for (Sell sell : list) {

					Object sellVisitlist = productManager.findSellVisitList(sell);
					List<SellProduct> sellProductlist = (List<SellProduct>) productManager.findsellProductList(sell);

					for (SellProduct product : sellProductlist) {
						
						Product pro =   productManager.findSellProductList(product);
						
						product.setProductName(pro.getProductName());
						product.setPrice(pro.getPrice());
					}
					
					Contacts contacts = productManager.findSellContactsList(sell);

					sell.setSellVisitlist(sellVisitlist);
					sell.setSellProductlist(sellProductlist);

					sell.setName(contacts.getName());
					sell.setCompany(contacts.getCompany());

				}

				bean.setStatus(200);

				bean.setRows(list);

			} else {

				bean.setStatus(400);
				bean.setMsg(Commonparam.error_param_msg);
			}
		} catch (Exception e) {
			bean.setMsg(e.getLocalizedMessage());
			logger.info("product/findSellList:param=" + data + ",error="
					+ e.getLocalizedMessage());
		}

		String json = JSONObject.fromObject(bean,
				Commonparam.getJsonConfig("yyyy-MM-dd HH:mm:ss")).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));
	}

	/**
	 * 新增拜访
	 * 
	 * @throws Exception
	 */
	@Action(value = "insertSellVisit")
	public void insertSellVisit() throws Exception {
		HttpServletResponse response = (HttpServletResponse) ActionContext
				.getContext().get(ServletActionContext.HTTP_RESPONSE);
		HttpServletRequest request = (HttpServletRequest) ActionContext
				.getContext().get(ServletActionContext.HTTP_REQUEST);

		BaseBean bean = new BaseBean();

		try {

			String keyparam = Commonparam.Md5String(data);
			JSONObject param = JSONObject.fromObject(data);

			if (keyparam.equals(key)) {
				User user = userManager.userLogin(param);
				Long userId = param.getLong("userId");

				if (user != null && user.getUserId() == userId) {

					productManager.insertSellVisit(param);

					bean.setStatus(200);

				}
			} else {
				bean.setStatus(400);
				bean.setMsg(Commonparam.error_param_msg);
			}

		} catch (Exception e) {
			bean.setMsg(e.getLocalizedMessage());
			logger.info("product/insertSellVisit:param=" + data + ",error="
					+ e.getLocalizedMessage());
		}

		String json = JSONObject.fromObject(bean).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));
	}

	
	
	/**
	 * 销售记录信息—————————— 添加，修改
	 * 
	 * @throws Exception
	 */
	@Action(value = "updateSellInfo")
	public void updateSellInfo() throws Exception {
		HttpServletResponse response = (HttpServletResponse) ActionContext
				.getContext().get(ServletActionContext.HTTP_RESPONSE);
		HttpServletRequest request = (HttpServletRequest) ActionContext
				.getContext().get(ServletActionContext.HTTP_REQUEST);

		BaseBean bean = new BaseBean();

		try {

			String keyparam = Commonparam.Md5String(data);
			JSONObject param = JSONObject.fromObject(data);
			if (keyparam.equals(key)) {
				User user = userManager.userLogin(param);
				Long userId = param.getLong("userId");

				if (user != null && user.getUserId() == userId)

				{
					param.put("updateTime", Commonparam.Date2Str());

					productManager.updateSellInfo(param);

					bean.setStatus(200);

				}
			} else {
				bean.setStatus(400);
				bean.setMsg(Commonparam.error_param_msg);
			}

		} catch (Exception e) {
			bean.setMsg(e.getLocalizedMessage());
			logger.info("product/updateSellInfo:param=" + data + ",error="
					+ e.getLocalizedMessage());
		}

		String json = JSONObject.fromObject(bean).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));
	}

	
	
	
	
	
	
	
	
	
	public UserManager getUserManager() {
		return userManager;
	}

	public void setUserManager(UserManager userManager) {
		this.userManager = userManager;
	}

	public String getKey() {
		return key;
	}

	public void setKey(String key) {
		this.key = key;
	}

	public String getData() {
		return data;
	}

	public void setData(String data) {
		this.data = data;
	}

	public void setProductManager(ProductManager productManager) {
		this.productManager = productManager;
	}

	public ProductManager getProductManager() {
		return productManager;
	}

}
